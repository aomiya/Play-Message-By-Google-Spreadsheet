import sbt._
import Keys._
import play._
import scala.io.Source
import java.io.PrintWriter
import java.io.File
import java.io.IOException
import scala.collection._
import scala.collection.JavaConversions._

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
import com.google.api.client.http.HttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.json.gson.GsonFactory
import com.google.gdata.client.spreadsheet._
import com.google.gdata.data.spreadsheet._
import com.google.gdata.data.PlainTextConstruct
import com.google.gdata.util.ServiceException

object Setting {

  // Common settings for accessing spreadsheet
  private val APPLICATION_NAME = "Hello Message Spreadsheet"
  private val JSON_FACTORY = GsonFactory.getDefaultInstance()
  private val SCOPES = Seq(
    "https://docs.google.com/feeds",
    "https://spreadsheets.google.com/feeds"
  )
  private val SPREADSHEET_URL = "https://spreadsheets.google.com/feeds/spreadsheets/private/full"  
  private val SPREADSHEET_FEED_URL = new URL(SPREADSHEET_URL)
  private val CURRENT_DIR = new java.io.File( "." ).getCanonicalPath

  // Your account's Information generated by Google Developer Console
  private val KEY_FILE_LOCATION = CURRENT_DIR+"/project/XXXX-XXXXXXXXX.p12"
  private val SERVICE_ACCOUNT_EMAIL = "YOUR SERVICE ACCOUNT EMAIL ADDRESS"

  // Your Spreadsheet Info
  private val SPREADSHEET_TITLE = "Message"
  private val WORKSHEET_TITLE = "sheetname"

  // Generating file extensions(related with spreadsheet column headers)
  // Spreadsheet must Contains column whose header is named "Key".
  private val EX_LIST = List("ja", "en")
  // Select default message file language from EX_LIST
  private val DEFAULT = "ja"

  val application = Seq(
    compile in Compile <<= (compile in Compile).dependsOn(Def.task {
      implicit val service = getService()
      findSpreadsheetByName(SPREADSHEET_TITLE) match{
        case None => println("Spreadsheet was not found")
        case Some(s) => findWorksheetByName(s, WORKSHEET_TITLE) match{
          case None => println("Worksheet was not found")
          case Some(w) => EX_LIST.foreach{ex=> 
            readDataRow(w, ex, "."+ex); if(ex==DEFAULT) readDataRow(w, ex, "");
          }
        }
      }
    })
  )

  private def getCredential() = {
    // Initializes an authorized analytics service object.
    // Construct a GoogleCredential object with the service account email
    // and p12 file downloaded from the developer console.
    val httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    new GoogleCredential.Builder()
        .setTransport(httpTransport)
        .setJsonFactory(JSON_FACTORY)
        .setServiceAccountId(SERVICE_ACCOUNT_EMAIL)
        .setServiceAccountPrivateKeyFromP12File(new File(KEY_FILE_LOCATION))
        .setServiceAccountScopes(SCOPES)
        .build()
  }

  private def getService() : SpreadsheetService = {
    println("Getting Spreadsheet Service")
    val service = new SpreadsheetService(APPLICATION_NAME)
    service.setProtocolVersion(SpreadsheetService.Versions.V3)
    service.setOAuth2Credentials(getCredential())  
    service
  }

  private def findSpreadsheetByName(spreadsheetName:String)(implicit service:SpreadsheetService) : Option[SpreadsheetEntry] = {
    println("Getting Spreadheet By Name")
    val sheetQuery = (new SpreadsheetQuery(SPREADSHEET_FEED_URL))
    sheetQuery.setTitleQuery(spreadsheetName)
    service.query(sheetQuery, classOf[SpreadsheetFeed]).getEntries().find{r=>true}
  }

  private def findWorksheetByName(ssEntry:SpreadsheetEntry, sheetName:String)(implicit service:SpreadsheetService) : Option[WorksheetEntry] = {
    println("Getting Workheet By Name")
    val worksheetQuery = (new WorksheetQuery(ssEntry.getWorksheetFeedUrl()))
    worksheetQuery.setTitleQuery(sheetName)
    service.query(worksheetQuery, classOf[WorksheetFeed]).getEntries().find{r=>true}
  }

  private def readDataRow(wsEntry:WorksheetEntry, target:String, ex:String)(implicit service:SpreadsheetService) = {
    println("Reading Sheet Data For " + target)
    val listFeedUrl = wsEntry.getListFeedUrl();
    val listFeed = service.getFeed(listFeedUrl, classOf[ListFeed]);
    val file = new PrintWriter("conf/messages"+ex, "utf8")
    listFeed.getEntries().foreach{r=> 
      val key = r.getCustomElements().getValue("Key")
      val value = r.getCustomElements().getValue(target)
      file.print("%s=%s\n".format(key, value))
    }
    file.close
  }
}